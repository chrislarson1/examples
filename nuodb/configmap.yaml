---
# Source: demo-ycsb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: demo-ycsb-2-nuodb
    group: nuodb
    chart: demo-ycsb-3.0.0
    release: "demo-ycsb-2"
  name: demo-ycsb-2-nuodb-ycsb-gen
data:
  ycsb_gen.sh: |
    #!/bin/sh

    task=$1
    db_schema=$2
    count=$3
    letter=$4
    repcount=$5
    threads=$6

    #export YCSB_HOME=/driver

    if [ "$task" == "" ]; then
        echo ""
        echo "Usage: ycsb_workload_gen.sh load|run [schema] [opsCount] [a|b|c|d|e|f|g] [repCount]"
        echo ""
        echo "    db schema"
        echo "             (default=user)"
        echo "             (to set, must also set DB_NAME and AGENT env vars)"
        echo "             (  otherwise will use nuo.properties values      )"
        echo ""
        echo "    opsCount =  num of rows for load operation"
        echo "             num of transactions for run operation"
        echo "             (default=10,000)"
        echo ""
        echo "    workload a =  50/50 read update"
        echo "             b =  95/5  read update"
        echo "             c =  100   read"
        echo "             d =  95/5  read insert"
        echo "             e =  95/5  scans insert"
        echo "             f =  50/50 read read/modify"
        echo ""
        echo "    repCount = num of times to run the benchmark"
        echo "             (default=1)"
        echo "             (continuous=0)"
        echo ""
        echo "    threads = Number of SQL statements processed per connection"
        echo "             (default=10)"
        echo ""
        echo "    override ENV variables"
        echo "             DB_NAME"
        echo "             DB_USER"
        echo "             DB_PASSWORD"
        echo ""
        exit
    fi

    if [ "$letter" == "" ]; then
        letter="c"
    fi

    if [ "$db_schema" == "" ]; then
        db_schema="user"
    fi

    if [ "$task" == "load" ]; then
        counttype="recordcount"
    else
        counttype="operationcount"
    fi

    if [ "$repcount" == "" ]; then
        repcount=1
    elif [ "$repcount" == "0" ]; then
        repcount=9999999
    fi

    # NTJ: The YCSB app/script parses the command line breaking on spaces - so LB_QUERY cannot work.
    # LOADBALANCER_QUERY
    # if [ -n "$LB_QUERY" ]; then
    #     LOADBALANCER_QUERY="&LB_QUERY=${LB_QUERY}"
    # fi

    LOADBALANCER_POLICY=""
    if [ -n "${LB_POLICY}" ]; then
        LOADBALANCER_POLICY="&LBPolicy=${LB_POLICY}"
    fi

    #check for nuo.properties file overrides
    if [ "$PEER_ADDRESS" != "" ] && [ "$DB_NAME" != "" ]; then
        AGENT_DB_NAME_VALUE="-p db.url=jdbc:com.nuodb://${PEER_ADDRESS}/${DB_NAME}?schema=${db_schema}"

        if [ "$TE_DIRECT" == "true" ]; then
            AGENT_DB_NAME_VALUE="${AGENT_DB_NAME_VALUE}&direct=true"
        else
            AGENT_DB_NAME_VALUE="${AGENT_DB_NAME_VALUE}${LOADBALANCER_QUERY}${LOADBALANCER_POLICY}"
        fi
    fi

    if [ "$DB_USER" != "" ]; then
        DB_USER_VALUE="-p db.user=${DB_USER}"
    fi

    if [ "$DB_PASSWORD" != "" ]; then
        DB_PASSWORD_VALUE="-p db.passwd=${DB_PASSWORD}"
    fi

    rm ycsb_$letter.log > /dev/null 2>&1

    for i in $(seq 1 $repcount); do

    echo "---------------------------------------------------------" >> ycsb_$letter.log
    echo "----- run number $i at "  `date`                               >> ycsb_$letter.log
    echo "---------------------------------------------------------" >> ycsb_$letter.log

    echo "==============================================================================================="
    echo "YCSB_HOME=$YCSB_HOME"

    echo "$YCSB_HOME/bin/ycsb.sh $task jdbc \
             -P $YCSB_HOME/nuo.properties \
             -P $YCSB_HOME/workloads/workload$letter \
             -p $counttype=$count \
             $AGENT_DB_NAME_VALUE \
             $DB_USER_VALUE \
             $DB_PASSWORD_VALUE \
             -p threads=2 -s >> ycsb_$letter.log 2>&1
    "

    $YCSB_HOME/bin/ycsb.sh $task jdbc \
             -P $YCSB_HOME/nuo.properties \
             -P $YCSB_HOME/workloads/workload$letter \
             -p $counttype=$count \
             $AGENT_DB_NAME_VALUE \
             $DB_USER_VALUE \
             $DB_PASSWORD_VALUE \
             -p threads=2 -s >> ycsb_$letter.log 2>&1

    done

    echo ""
    exit 0
---
# Source: demo-ycsb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: demo-ycsb-2-nuodb
    group: nuodb
    chart: demo-ycsb-3.0.0
    release: "demo-ycsb-2"
  name: demo-ycsb-2-nuodb-startup
data:
  startup.sh: |-
    #!/bin/sh

    #########################################
    #
    # expected params
    #
    #    YCSB_WORKLOAD = work load
    #    PEER_ADDRESS = admin service load balancer address
    #    DB_NAME
    #    DB_USER
    #    DB_PASSWORD

    set -e

    : ${MAX_DELAY:=240000}

    # YCSB_THREADS=10
    # if [ -n "${NO_OF_PROCESSES}" ]; then
    #     YCSB_THREADS="${NO_OF_PROCESSES}"
    # fi

    # NUMOFROWS=10000
    # if [ -n "${NO_OF_ROWS}" ]; then
    #     NUMOFROWS="${NO_OF_ROWS}"
    # fi

    # NUMOFITERATIONS=0
    # if [ -n "${NO_OF_ITERATIONS}" ]; then
    #     NUMOFITERATIONS="${NO_OF_ITERATIONS}"
    # fi

    # set default values
    : ${NO_OF_PROCESSES:=10}
    : ${NO_OF_ROWS:=10000}
    : ${NO_OF_ITERATIONS:=25}
    : ${OPS_PER_ITERATION:=10000}
    : ${YCSB_WORKLOAD:=b}

    # wait to be able to create connections, and timeout after 4 minutes...
    java -cp /driver/lib/simple-sql-cli.jar com.nuodb.scripts.SqlDial --broker ${PEER_ADDRESS} --database ${DB_NAME} --user ${DB_USER} --password ${DB_PASSWORD} --timeout ${MAX_DELAY} --connection-property direct=$TE_DIRECT

    #check of table is populated
    tablecount=$( java -jar /driver/lib/simple-sql-cli.jar --broker ${PEER_ADDRESS} --database ${DB_NAME} -P schema=user1 -P direct=$TE_DIRECT --user ${DB_USER} --password ${DB_PASSWORD} --file /driver/check_usertable.sql | grep 'usertable:' | awk -F ',' '{ print $2; }' )
    if [ "$tablecount" == "0" ]; then
        #create table
        /driver/create_usertable.sh 1

        #populate table
        echo "Table ROWS: ${NO_OF_ROWS}"
        /driver/ycsb_gen.sh load user1 ${NO_OF_ROWS}
    fi

    for i in $(seq 1 $NO_OF_PROCESSES);
    do
        /driver/ycsb_gen.sh run user1 ${OPS_PER_ITERATION} ${YCSB_WORKLOAD} ${NO_OF_ITERATIONS} 2 &
    done
    wait

    exit 0
---
# Source: demo-ycsb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: demo-ycsb-2-nuodb
    group: nuodb
    chart: demo-ycsb-3.0.0
    release: "demo-ycsb-2"
  name: demo-ycsb-2-nuodb-create
data:
  create_usertable.sh: |-
    #!/bin/sh


    YCSB_SCHEMA_COUNT=$1

    if [ "$YCSB_SCHEMA_COUNT" == "" ]; then
      echo "usage: create_usertable.sh numberOfSchemas"
      exit 0
    fi

    if [ "$DB_NAME" == "" ]; then
      DB_NAME="test"
    fi

    if [ "$DB_USER" == "" ]; then
      DB_USER="dba"
    fi

    if [ "$DB_PASSWORD" == "" ]; then
      DB_PASSWORD="goalie"
    fi

    if [ "$PEER_ADDRESS" == "" ]; then
      AGENT="nuoadmin1"
    fi

    echo ""
    for i in $(seq 1 $YCSB_SCHEMA_COUNT); do
        echo "Creating ycsb table in schema user${i}"
        #java -cp /driver/jar/ nuodb.SimpleDriver -config /driver/ycsb.props -p DB_SCHEMA=user${i} >> /var/tmp/create_usertable.log 2>&1
        java -jar /driver/lib/simple-sql-cli.jar --broker ${PEER_ADDRESS} --user ${DB_USER} --password ${DB_PASSWORD} --database ${DB_NAME} -P schema=user${i} -P direct=$TE_DIRECT --file /driver/create_usertable.sql
    done

    echo "Done"
    echo ""
---