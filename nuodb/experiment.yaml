apiVersion: redskyops.dev/v1alpha1
kind: Experiment
metadata:
  name: nuodb-example
spec:
  optimization:
  - name: "experimentBudget"
    value: "200"
  - name: "burnIn"
    value: "10"
  parameters:
  - name: persistence_size
    min: 5
    max: 30
  - name: sm_memory
    min: 8
    max: 16
  - name: sm_cpu
    min: 4
    max: 8
  - name: sm_replicas
    min: 1
    max: 3
  - name: te_memory
    min: 8
    max: 16
  - name: te_cpu
    min: 2
    max: 4
  - name: te_replicas
    min: 1
    max: 3
  metrics:
  - name: duration
    minimize: true
    query: "{{duration .StartTime .CompletionTime}}"
  - name: cost
    minimize: true
    type: pods
    # Note that these cost weights are specific to GKE and represent $22/month/cpu and $3/month/GB
    query: '{{resourceRequests .Pods "cpu=0.022,memory=0.000000000003"}}'
    selector:
      matchExpressions:
        - key: component
          operator: In
          values:
          - sm
          - te
  patches:
#  - targetRef:
#      kind: StatefulSet
#      apiVersion: apps/v1
#      name: sm-database-nuodb-cluster0-demo
#    patch: |
#      spec:
#        replicas: {{ .Values.sm_replicas }}
#        template:
#          spec:
#            containers:
#            - name: engine
#              resources:
#                database:
#                  persistence:
#                    size: "{{ .Values.persistence_size }}Gi"
#                  sm:
#                    resources:
#                      limits:
#                        cpu: "{{ .Values.sm_cpu }}"
#                        memory: "{{ .Values.sm_memory }}Mi"
#                      requests:
#                        cpu: "{{ .Values.sm_cpu }}"
#                        memory: "{{ .Values.sm_memory }}Mi"
  - targetRef:
      kind: StatefulSet
      apiVersion: apps/v1
      name: sm-database-nuodb-cluster0-demo-hotcopy
    patch: |
      spec:
        replicas: {{ .Values.sm_replicas }}
        template:
          spec:
            containers:
            - name: engine
              resources:
                database:
                  persistence:
                    size: "{{ .Values.persistence_size }}Gi"
                  sm:
                    resources:
                      limits:
                        cpu: "{{ .Values.sm_cpu }}"
                        memory: "{{ .Values.sm_memory }}Mi"
                      requests:
                        cpu: "{{ .Values.sm_cpu }}"
                        memory: "{{ .Values.sm_memory }}Mi"
  - targetRef:
      kind: Deployment
      apiVersion: apps/v1
      name: te-database-nuodb-cluster0-demo
    patch: |
      spec:
        replicas: {{ .Values.te_replicas }}
        template:
          spec:
            containers:
            - name: engine
              resources:
                database:
                  te:
                    resources:
                      limits:
                        cpu: "{{ .Values.te_cpu }}"
                        memory: "{{ .Values.te_memory }}Mi"
                      requests:
                        cpu: "{{ .Values.te_cpu }}"
                        memory: "{{ .Values.te_memory }}Mi"
  setupServiceAccountName: nuodb-setup
  template: # Trial
    spec:
      template: # Job
        spec:
          template: # Pod
            spec:
              restartPolicy: Never
              containers:
              - name: ycsb-load
                image: docker.io/nuodb/ycsb:latest
                imagePullPolicy: Always
                env:
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      name: "demo.nuodb.com"
                      key: database-name
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: "demo.nuodb.com"
                      key: database-username
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "demo.nuodb.com"
                      key: database-password
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - { name: PEER_ADDRESS,        value: "nuodb.nuodb.svc" }
                - { name: DB_SCHEMA,           value: "USER" }
                - { name: YCSB_WORKLOAD,       value: "b" }
                - { name: LB_POLICY,           value: "nearest" }
                - { name: NO_OF_PROCESSES,     value: "2" }
                - { name: NO_OF_ROWS,          value: "10000" }
                - { name: NO_OF_ITERATIONS,    value: "0" }
                - { name: OPS_PER_ITERATION,   value: "10000" }
                - { name: MAX_DELAY,           value: "240000" }
                - { name: TE_DIRECT,           value: "false" }
                volumeMounts:
                - name: ycsb-gen
                  mountPath: /driver/ycsb_gen.sh
                  subPath: ycsb_gen.sh
                - name: startup
                  mountPath: /driver/startup.sh
                  subPath: startup.sh
                - name: create
                  mountPath: /driver/create_usertable.sh
                  subPath: create_usertable.sh
              volumes:
              - name: ycsb-gen
                configMap:
                  name: demo-ycsb-2-nuodb-ycsb-gen
                  defaultMode: 0777
              - name: startup
                configMap:
                  name: demo-ycsb-2-nuodb-startup
                  defaultMode: 0777
              - name: create
                configMap:
                  name: demo-ycsb-2-nuodb-create
                  defaultMode: 0777
